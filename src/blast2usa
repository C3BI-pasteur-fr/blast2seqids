#! /usr/bin/env python

########################################################################################
#                                                                                      #
#   Author: Bertrand Neron,                                                            #
#   Organization:'Projects and Developments in Bioinformatic' Group,                   #
#                 Institut Pasteur, Paris.                                             #  
#   Distributed under GPLv2 Licence. Please refer to the COPYING document.             #
#                                                                                      #
########################################################################################

import re
import sys


def _searchBegining( fh ):
    """
    consume the file object fh until it find the beginning of the blast report
    """
    for line in fh:
        if line.startswith( 'Sequences producing significant alignments:'):
            fh.next()
            return fh
        
    
def parseSummary( fh , From = 0 , To = 0):
    """
    parse the summary of a blast report in -m 0 format
    @param From: the rank of the first hsp to extract the sequence. to the first hsp is numbered 1
    @type From: positive integer
    @param To: the rank of last hsp to extract the sequence. 
    @type To: positive integer
    @return: the list of the sequence id of the hsp with their respective data banks, 
             each tuple data bank, sequence ID are unique.
    @rtype: a list of tuple [ (string bank , string sequence id) , ... ]
    """
    fh = _searchBegining( fh )
    sequences = []
    hitNb = 0
    pattern = re.compile( '^(\w*)\|(\w*)\|(\w*) (.*)\.{3}')
    for line in fh:
        if not line.strip():
            #it's the end of the summary
            break
        hitNb += 1
        if To and hitNb > To:
            break
        if hitNb < From:
            continue
        match = re.match( pattern , line)
        try:
            bank= match.group(1)
        except:
            bank= None
        try:
            acc = match.group(2)
        except :
            acc = None
        try:
            name = match.group(3)
        except:
            name = None
        try:
            desc = match.group(4)
        except:
            desc = None
        
        if bank is None:
            print >> sys.stderr , "WARNING the hit %s have no data bank: skip this Hit" % line
            continue
        if acc is None:
            if name is None:
                print >> sys.stderr , "WARNING the hit %s have no Accession neither Name: skip this Hit" % line
                continue 
            else:
                id = name
        else:
            id = acc
        sequences.append( ( bank , id ) )
    return sequences
    

def format2usa( sequenceID ):
    """
    format the a list of sequence Id with there banks to a usa list format
    @param sequenceID: list of sequences identifier and the bank
    @type sequenceID: list of tuple [ ( string bank, string sequence ID) , ... ]
    @return:  list of sequence ID in USA format.
    @rtype: string
    """
    s= ''
    for bank , id  in sequenceID:
        s = "%s%s:%s\n" %( s , bank , id )
    return s

    
if __name__ ==  '__main__':

    from optparse import OptionParser
    
    usage="""
       %prog [options] blastReport
       parse the summary of a blast2 report (text format -m 0-6 ) 
       and return a list of hits identifier in USA format
"""
    parser = OptionParser( usage= usage )       
    parser.add_option( "-f" , "--from" ,
                       action = "store",
                       type= "int" ,
                       dest = "From" ,
                       default = 0,
                       help = "specify the first hit to parse")
    parser.add_option( "-t" , "--to" ,
                       action = "store",
                       type= "int" ,
                       dest = "To" ,
                       default = 0,
                       help = "specify the last hit to parse")
    options, args = parser.parse_args()
    From = options.From
    To = options.To
    if From and From < 0:
        print >> sys.stderr , "'From' (-f --from) value must be positive" 
        parser.print_help()
        sys.exit(1)
    if To and To < 0:
        print >> sys.stderr , "'To' (-t --to) value must be positive" 
        parser.print_help()
        sys.exit(1)
    if To and ( From > To ):
        print >> sys.stderr , "'From' (-f --from) value must be less or equal than 'To' (-t --to) value" 
        parser.print_help()
        sys.exit(1)
    if len( args  ) !=1:
        print >> sys.stderr , "you must specify a blast report" 
        parser.print_help()
        sys.exit(1)
    reportFileName = args[0]
    try:
        blastReport = open( reportFileName ,'r' )
    except IOError , err:
        print >> sys.stderr , "cannot open Blast Report" , err  
        parser.print_help() 
        sys.exit(1) 
    
    sequenceIDs = parseSummary( blastReport , From = From , To = To)
    print format2usa( sequenceIDs )